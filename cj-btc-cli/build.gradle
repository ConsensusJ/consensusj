/*
 * CLI tool support library and `cj-bitcoin-cli` tool.
 * `cj-bitcoin-cli` tool is compiled to a native command-line tool with Graal `native-image`
 */
plugins {
    id 'java-library'
    // Instead of using 'org.graalvm.buildtools.native' directly we need to include
    // the micronaut application plugin to avoid a Gradle bug:
    // See: https://github.com/micronaut-projects/micronaut-gradle-plugin/issues/706
    // and: https://github.com/gradle/gradle/issues/17559
    //id 'org.graalvm.buildtools.native' version '0.9.28'
    id("io.micronaut.application") version "${micronautAppGradlePluginVersion}"
}

ext.moduleName = 'org.consensusj.bitcoin.cli'

tasks.withType(JavaCompile).configureEach {
    options.release = 21
}

configurations {
    nativeToolImplementation.extendsFrom implementation
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    api project(':consensusj-jsonrpc-cli')
    api project(':cj-btc-jsonrpc')

    // Add SLF4J runtime adapter for JDK logging for GraalVM native-image build of bitcoin CLI tool
    nativeImageClasspath "org.slf4j:slf4j-jdk14:${slf4jVersion}"

    testImplementation "org.apache.groovy:groovy:${groovyVersion}"

    testRuntimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"
}

def mainClassName = "org.consensusj.bitcoin.cli.BitcoinCLITool"

jar {
    manifest {
        attributes 'Implementation-Title': 'ConsensusJ Bitcoin CLI tool',
                    'Automatic-Module-Name': moduleName,
                    'Main-Class': mainClassName,
                    'Implementation-Version': archiveVersion.get()
    }
}

graalvmNative {
    binaries {
        main {
            mainClass = mainClassName
            imageName = 'cj-bitcoin-cli'
        }
        test {
            imageName = 'cj-bitcoin-cli-dbg'
        }
    }
    binaries.all {
        sharedLibrary = false
        buildArgs.add('--verbose')
    }
}

// Test Structure
sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        groovy {
            srcDir 'src/integ/groovy'
        }
        resources {
            srcDir 'src/integ/resources'
        }
    }
}

tasks.register('regTest', Test) {
    description = 'Runs integration tests against Bitcoin Core in regtest mode'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true
    beforeSuite { descriptor ->
        if (descriptor.getClassName() != null) {
            logger.lifecycle('\033[1m' + descriptor.getName() + "\033[0m") // bold
        }
    }
    beforeTest { descriptor ->
        logger.lifecycle('    ' + descriptor.getName())
    }

    systemProperty 'regtest', true
    systemProperty 'java.util.logging.config.file', "${project.projectDir}/src/integ/logging.properties"
    systemProperties(["omni.test.rpcTestUser"    : rpcTestUser,
                      "omni.test.rpcTestPassword": rpcTestPassword,
    ])
    include 'org/consensusj/bitcoin/cli/**'
}
