buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.asciidoctor.jvm.convert'    version '3.3.2'
    id 'org.ajoberstar.git-publish'     version '2.1.3'
}

buildScan {
    if (System.getenv('CI')) {
        publishAlways()
        tag 'CI'
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'test-report-aggregation'
    //apply plugin: 'findbugs'

    version = consensusjVersion     // set in gradle.properties
    group = 'com.msgilligan'

    repositories {
        mavenCentral()
    }

//    tasks.withType(FindBugs) {
//        reports {
//            xml.enabled false
//            html.enabled true
//        }
//    }
}

subprojects {
    dependencies {
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"

        testImplementation "org.apache.groovy:groovy:${groovyVersion}"
        testImplementation("org.spockframework:spock-core:${spockVersion}") {
            exclude module: "groovy-all"
        }

        testRuntimeOnly "net.bytebuddy:byte-buddy:1.10.9"                 // allows Spock to mock classes (in addition to interfaces)
        testRuntimeOnly "org.objenesis:objenesis:3.1"                     // Allow Spock to mock classes with constructor arguments
        testRuntimeOnly  "org.slf4j:slf4j-jdk14:${slf4jVersion}"          // Runtime implementation of slf4j
    }

    configurations.all {
        resolutionStrategy {
            force "org.apache.groovy:groovy:${groovyVersion}"
            force "org.apache.groovy:groovy-json:${groovyVersion}"
        }
        // Ensure usage of Groovy 4.0 which has new Maven co-ordinates
        resolutionStrategy.capabilitiesResolution.all {
            if (capability.group.equals("org.codehaus.groovy")) {
                selectHighestVersion()
            }
        }
    }

    compileJava {
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
        options.encoding = 'UTF-8'
        options.release = 11
    }

    tasks.withType(GroovyCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.withType(AbstractArchiveTask) {
        // This should result in reproducible JAR builds
        // See: https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    test {
        useJUnitPlatform()          // We're using Spock 2.0 and JUnit 5
    }
}

apply from: 'gradle/idea.gradle'
apply from: 'gradle/javadoc.gradle'
apply from: 'gradle/asciidoctor.gradle'
apply from: 'gradle/github-pages.gradle'
apply from: 'gradle/maven-publish.gradle'

dependencies {
    testReportAggregation project(':').subprojects
}

reporting {
    reports {
        testAggregateTestReport(AggregateTestReport) {
            testType = TestSuiteType.UNIT_TEST
        }
    }
}

tasks.named('check') {
    dependsOn tasks.named('testAggregateTestReport', TestReport)
}

build.dependsOn subprojects.build

task buildCI(dependsOn: [build, javadocAll, asciidoctor])
