buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.asciidoctor.jvm.convert'    version '3.3.2'
    id 'org.ajoberstar.git-publish'     version '2.1.3'
}

buildScan {
    if (System.getenv('CI')) {
        publishAlways()
        tag 'CI'
    }
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    //apply plugin: 'findbugs'

    version = consensusjVersion     // set in gradle.properties
    group = 'com.msgilligan'

    repositories {
        mavenCentral()
    }

//    tasks.withType(FindBugs) {
//        reports {
//            xml.enabled false
//            html.enabled true
//        }
//    }
}

subprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {
        implementation "org.slf4j:slf4j-api:${slf4jVersion}"

        testImplementation "org.codehaus.groovy:groovy:${groovyVersion}:indy"
        testImplementation("org.spockframework:spock-core:${spockVersion}") {
            exclude module: "groovy-all"
        }

        testRuntimeOnly "net.bytebuddy:byte-buddy:1.10.9"                 // allows Spock to mock classes (in addition to interfaces)
        testRuntimeOnly "org.objenesis:objenesis:3.1"                     // Allow Spock to mock classes with constructor arguments
        testRuntimeOnly  "org.slf4j:slf4j-jdk14:${slf4jVersion}"          // Runtime implementation of slf4j
    }

    // See http://blog.freeside.co/2014/06/24/gradle-and-groovys-invoke-dynamic-support/
    configurations.all {
        resolutionStrategy {
            force "org.codehaus.groovy:groovy:${groovyVersion}:indy"
            force "org.codehaus.groovy:groovy-json:${groovyVersion}:indy"
        }
    }

    compileJava {
        options.compilerArgs << '-Xlint:deprecation' << '-Xlint:unchecked'
        options.encoding = 'UTF-8'
    }

    tasks.withType(GroovyCompile) {
        groovyOptions.optimizationOptions.indy = true
        options.encoding = 'UTF-8'
    }

    tasks.withType(AbstractArchiveTask) {
        // This should result in reproducible JAR builds
        // See: https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    test {
        useJUnitPlatform()          // We're using Spock 2.0 and JUnit 5
    }
}

apply from: 'gradle/idea.gradle'
apply from: 'gradle/javadoc.gradle'
apply from: 'gradle/asciidoctor.gradle'
apply from: 'gradle/github-pages.gradle'
apply from: 'gradle/maven-publish.gradle'

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

build.dependsOn subprojects.build

task buildCI(dependsOn: [build, testReport, javadocAll, asciidoctor])
