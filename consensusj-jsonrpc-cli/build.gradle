/*
 * CLI tool support library and `cj-bitcoin-cli` tool.
 * `jsonrpc` tool is compiled to a native command-line tool with Graal `native-image`
 */
plugins {
    id 'java-library'
}

tasks.withType(JavaCompile).configureEach {
    options.release = 21
}

configurations {
    nativeToolImplementation.extendsFrom implementation
}

dependencies {
    api project(':consensusj-jsonrpc')

    api 'commons-cli:commons-cli:1.10.0'

    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-toml:${jacksonVersion}"

    // Add SLF4J runtime adapter for JDK logging for GraalVM native-image build of jsonrpc tool
    nativeToolImplementation "org.slf4j:slf4j-jdk14:${slf4jVersion}"

    testImplementation "org.apache.groovy:groovy:${groovyVersion}"

    testRuntimeOnly "org.slf4j:slf4j-jdk14:${slf4jVersion}"
}

ext.moduleName = 'org.consensusj.jsonrpc.cli'
def mainClassName = "org.consensusj.jsonrpc.cli.GenericJsonRpcTool"

jar {
    manifest {
        attributes  'Implementation-Title': 'ConsensusJ JSON-RPC CLI library and tool',
                    'Automatic-Module-Name': moduleName,
                    'Main-Class': mainClassName,
                    'Implementation-Version': archiveVersion.get()
    }
}

// Compile a native image using GraalVM's native-image tool
// Graal must be installed at $JAVA_HOME
tasks.register('nativeCompile', Exec) {
    dependsOn jar
    workingDir = projectDir
    executable = "${System.env.JAVA_HOME}/bin/native-image"
    args = ['--verbose',
            '--no-fallback',
            '-cp', "${-> configurations.nativeToolImplementation.asPath}", // Lazy configuration resolution
            '-jar', jar.archiveFile.get(),
            '-H:Path=build',
            '-H:Name=jsonrpc',
            '--initialize-at-build-time=com.fasterxml.jackson.annotation.JsonProperty$Access',
            '-H:IncludeResources=logging.properties',
            '-H:EnableURLProtocols=http,https',
            '-H:+ReportUnsupportedElementsAtRuntime',
            '-H:+ReportExceptionStackTraces',
            '-H:-CheckToolchain'  // Needed for running inside Nix sandbox
    ]
}
