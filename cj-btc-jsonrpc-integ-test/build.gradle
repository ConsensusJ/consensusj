configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    testImplementation project(':cj-btc-jsonrpc-gvy')
    testImplementation project(':cj-btc-json')
    testImplementation project(':cj-btc-services')     // To test WalletAppKitService
    testImplementation project(':cj-bitcoinj-util')     // For BlockUtils
    testImplementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.9.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.9.3"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.9.3"

    testImplementation "org.apache.groovy:groovy:${groovyVersion}"
    testImplementation ("org.apache.groovy:groovy-json:${groovyVersion}") {
        transitive = false
    }

    testImplementation project(':cj-bitcoinj-dsl-gvy')                // Use Groovy extensions in tests
}

// Test Structure
sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        java {
            srcDir 'src/integ/java'
        }
        groovy {
            srcDir 'src/integ/groovy'
        }
        resources {
            srcDir 'src/integ/resources'
        }
    }
}

def infuraApiKeyOrEmpty = System.env.INFURA_API_KEY ?: project.findProperty('infuraApiKey') ?: ''

test {
    testLogging.showStandardStreams = true
    systemProperty 'java.util.logging.config.file', "${project.projectDir}/src/test/logging.properties"
    systemProperty 'org.consensusj.ethereum.infuraApiKey', infuraApiKeyOrEmpty
    beforeTest { descriptor ->
        logger.lifecycle('    ' + descriptor.getName())
    }

}

task integrationTest(type: Test) {
    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true
}

task regTest(type: Test) {
    description = 'Runs integration tests against Bitcoin Core in regtest mode'
    group = 'verification'
    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    testLogging.showStandardStreams = true
    beforeSuite { descriptor ->
        if (descriptor.getClassName() != null) {
            logger.lifecycle('\033[1m' + descriptor.getName() + "\033[0m") // bold
        }
    }
    beforeTest { descriptor ->
        logger.lifecycle('    ' + descriptor.getName())
    }

    systemProperty 'regtest', true
    systemProperty 'java.util.logging.config.file', "${project.projectDir}/src/integ/logging.properties"
    systemProperties ([ "omni.test.rpcTestUser": rpcTestUser,
                        "omni.test.rpcTestPassword": rpcTestPassword,
    ])
    include 'org/consensusj/bitcoin/rpc/**',
            'org/consensusj/bitcoin/integ/bitcoinj/**',
            'org/consensusj/bitcoin/integ/funding/**',
            'org/consensusj/bitcoin/integ/services/**',
            'org/consensusj/bitcoin/integ/java/**'
}
